generator client {
  provider        = "prisma-client-js"
  output          = "../src/generated/prisma"
  binaryTargets   = ["native", "linux-musl", "rhel-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique @db.VarChar(255)
  passwordHashed String    @db.VarChar(255)
  role           String    @default("student") @db.VarChar(50)
  name           String    @db.VarChar(255)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  deletedAt      DateTime?

  student        Student?
  teacher        Teacher?
  parent         Parent?
}

model Parent {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  contactNumber  String    @db.VarChar(50)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  deletedAt      DateTime?

  user           User      @relation(fields: [userId], references: [id])
  students       Student[]
}

model Student {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique
  parentId         Int
  studentNumber    String    @db.VarChar(100)
  dateOfBirth      DateTime
  gender           String    @db.VarChar(10)
  guardianName     String    @db.VarChar(100)
  guardianContact  String    @db.VarChar(100)
  address          String    @db.VarChar(255)
  gradeLevel       String    @db.VarChar(50)
  status           String    @default("active") @db.VarChar(50)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  deletedAt        DateTime?

  user             User      @relation(fields: [userId], references: [id])
  parent           Parent    @relation(fields: [parentId], references: [id])
  enrollments      Enrollment[]
  evaluations      Evaluation[]
  grades           Grade[]
  attendances      Attendance[]
  reportCards      ReportCard[]
  payments         Payment[]
}

model Teacher {
  id               Int       @id @default(autoincrement())
  userId           Int       @unique
  employeeNumber   String    @db.VarChar(100)
  specialization   String    @db.VarChar(100)
  contactNumber    String    @db.VarChar(50)
  assignedSections String?   @db.VarChar(255)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  deletedAt        DateTime?

  user             User      @relation(fields: [userId], references: [id])
  subjects         Subject[]
  sections         Section[]
  evaluations      Evaluation[]
}

model Enrollment {
  id          Int       @id @default(autoincrement())
  studentId   Int
  sectionId   Int
  schoolYear  String    @db.VarChar(20)
  status      String    @default("enrolled") @db.VarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?

  student     Student   @relation(fields: [studentId], references: [id])
  section     Section   @relation(fields: [sectionId], references: [id])
  subjects    Subject[]
  payments    Payment[]
}

model Section {
  id         Int       @id @default(autoincrement())
  teacherId  Int
  name       String    @db.VarChar(100)
  gradeLevel String    @db.VarChar(50)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?

  teacher    Teacher   @relation(fields: [teacherId], references: [id])
  enrollments Enrollment[]
}

model Subject {
  id          Int       @id @default(autoincrement())
  enrollmentId Int
  teacherId   Int
  name        String    @db.VarChar(100)
  description String?   @db.VarChar(255)
  gradeLevel  String    @db.VarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  deletedAt   DateTime?

  enrollment  Enrollment @relation(fields: [enrollmentId], references: [id])
  teacher     Teacher    @relation(fields: [teacherId], references: [id])
  grades      Grade[]
  evaluations Evaluation[]
}

model Grade {
  id         Int       @id @default(autoincrement())
  subjectId  Int
  studentId  Int
  quarter    String    @db.VarChar(20)
  grade      Float
  remarks    String?   @db.VarChar(255)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?

  subject    Subject   @relation(fields: [subjectId], references: [id])
  student    Student   @relation(fields: [studentId], references: [id])
}

model Evaluation {
  id         Int       @id @default(autoincrement())
  studentId  Int
  subjectId  Int
  teacherId  Int
  rating     Int
  comments   String?   @db.VarChar(255)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?

  student    Student   @relation(fields: [studentId], references: [id])
  subject    Subject   @relation(fields: [subjectId], references: [id])
  teacher    Teacher   @relation(fields: [teacherId], references: [id])
}

model Attendance {
  id         Int       @id @default(autoincrement())
  studentId  Int
  date       DateTime
  status     String    @db.VarChar(50)
  remarks    String?   @db.VarChar(255)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  deletedAt  DateTime?

  student    Student   @relation(fields: [studentId], references: [id])
}

model ReportCard {
  id           Int       @id @default(autoincrement())
  studentId    Int
  schoolYear   String    @db.VarChar(20)
  averageGrade Float
  rank         Int
  remarks      String?   @db.VarChar(255)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  deletedAt    DateTime?

  student      Student   @relation(fields: [studentId], references: [id])
}

model Payment {
  id             Int       @id @default(autoincrement())
  studentId      Int
  enrollmentId   Int
  amount         Float
  paymentType    String    @db.VarChar(50)
  paymentMethod  String    @db.VarChar(50)
  referenceNumber String   @db.VarChar(100)
  status         String    @db.VarChar(50)
  paymentDate    DateTime
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  deletedAt      DateTime?

  student        Student   @relation(fields: [studentId], references: [id])
  enrollment     Enrollment @relation(fields: [enrollmentId], references: [id])
}
