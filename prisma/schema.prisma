generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         Int           @id @default(autoincrement())
  email      String        @unique @db.VarChar(255)
  role       UserRole      @default(STUDENT)
  status     GeneralStatus @default(ACTIVE)
  createdAt  DateTime      @default(now())
  deletedAt  DateTime?
  updatedAt  DateTime      @updatedAt
  firstName  String        @db.VarChar(255)
  middleName String?       @db.VarChar(255)
  familyName String        @db.VarChar(255)
  suffix     String?       @db.VarChar(50)
  student    Student?
}

model Student {
  id            Int       @id @default(autoincrement())
  userId        Int       @unique
  studentNumber String    @unique @db.VarChar(100)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  birthdate     DateTime  @default(now()) @db.Date
  user          User      @relation(fields: [userId], references: [id])
}

model Feedback {
  id         Int           @id @default(autoincrement())
  type       FeedbackType
  message    String
  suggestion String?
  status     GeneralStatus @default(ACTIVE)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  deletedAt  DateTime?
}

model YearLevel {
  id            Int            @id @default(autoincrement())
  name          String         @unique @db.VarChar(50)
  status        GeneralStatus  @default(ACTIVE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  registrations Registration[]
}

model AcademicTerm {
  id            Int            @id @default(autoincrement())
  year          String         @unique @db.VarChar(20)
  startDate     DateTime       @db.Date
  endDate       DateTime       @db.Date
  status        GeneralStatus  @default(ACTIVE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  registrations Registration[]
}

model Registration {
  id                   Int                 @id @default(autoincrement())
  studentApplicationId Int?
  schoolYearRef        Int
  registrationType     RegistrationType    @default(NEW)
  yearLevelRef         Int
  studentNo            String              @unique @db.VarChar(100)
  familyName           String              @db.VarChar(255)
  firstName            String              @db.VarChar(255)
  middleName           String?             @db.VarChar(255)
  birthdate            DateTime            @db.Date
  placeOfBirth         String              @db.VarChar(255)
  age                  Int
  gender               Gender
  streetAddress        String              @db.VarChar(255)
  city                 String              @db.VarChar(100)
  stateProvince        String              @db.VarChar(100)
  postalCode           String              @db.VarChar(20)
  modeOfPayment        String              @db.VarChar(50)
  amountPayable        Decimal             @db.Decimal(10, 2)
  emailAddress         String              @db.VarChar(255)
  status               RegistrationStatus  @default(PENDING)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  deletedAt            DateTime?
  contactNumbers       ContactNumber[]
  guardians            Guardian[]
  schoolYear           AcademicTerm        @relation(fields: [schoolYearRef], references: [id])
  studentForm          StudentApplication? @relation(fields: [studentApplicationId], references: [id])
  yearLevel            YearLevel           @relation(fields: [yearLevelRef], references: [id])
  registrationcode     RegistrationCode[]
}

model Guardian {
  id                Int           @id @default(autoincrement())
  registrationId    Int
  familyName        String        @db.VarChar(255)
  firstName         String        @db.VarChar(255)
  middleName        String?       @db.VarChar(255)
  occupation        String        @db.VarChar(100)
  relationToStudent String        @db.VarChar(100)
  status            GeneralStatus @default(ACTIVE)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt         DateTime?
  registration      Registration  @relation(fields: [registrationId], references: [id])
}

model ContactNumber {
  id             Int           @id @default(autoincrement())
  registrationId Int
  number         String        @db.VarChar(50)
  type           String?       @db.VarChar(20)
  status         GeneralStatus @default(ACTIVE)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  registration   Registration  @relation(fields: [registrationId], references: [id])
}

model Requirements {
  id              Int               @id @default(autoincrement())
  requirementType String            @db.VarChar(100)
  status          RequirementStatus @default(PENDING)
  fileUrl         String?           @db.VarChar(255)
  description     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
}

model StudentApplication {
  id                    Int                @id @default(autoincrement())
  academicYear          String             @db.VarChar(20)
  admissionToGrade      String             @db.VarChar(50)
  familyName            String             @db.VarChar(255)
  firstName             String             @db.VarChar(255)
  middleName            String?            @db.VarChar(255)
  nickName              String?            @db.VarChar(100)
  birthdate             DateTime           @db.Date
  placeOfBirth          String             @db.VarChar(255)
  age                   Int
  birthOrder            Int
  numberOfSiblings      Int
  gender                Gender
  languagesSpokenAtHome String             @db.VarChar(255)
  childStatus           ChildStatus?
  landLine              String?            @db.VarChar(50)
  mobileNumber          String             @db.VarChar(50)
  emailAddress          String             @db.VarChar(255)
  homeAddress           String             @db.VarChar(255)
  city                  String             @db.VarChar(100)
  stateProvince         String             @db.VarChar(100)
  postalCode            String             @db.VarChar(20)
  specialSkills         String?
  hobbiesInterests      String?
  status                ApplicationStatus  @default(PENDING)
  createdBy             Int
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  deletedAt             DateTime?
  familyBackgrounds     FamilyBackground[]
  healthHistory         HealthHistory?
  registrations         Registration[]
  registrationCodes     RegistrationCode[]
}

model HealthHistory {
  id                     Int                @id @default(autoincrement())
  studentFormId          Int                @unique
  childhoodDiseases      String?
  allergies              String?
  otherMedicalConditions String?
  immunizations          String?
  specificHandicaps      String?
  createdBy              Int
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  deletedAt              DateTime?
  studentForm            StudentApplication @relation(fields: [studentFormId], references: [id])
}

model FamilyBackground {
  id                    Int                @id @default(autoincrement())
  studentFormId         Int
  guardianType          GuardianType
  familyName            String             @db.VarChar(255)
  firstName             String             @db.VarChar(255)
  middleName            String?            @db.VarChar(255)
  birthdate             DateTime           @db.Date
  placeOfBirth          String             @db.VarChar(255)
  age                   Int
  nationality           String             @db.VarChar(100)
  religion              String             @db.VarChar(100)
  landLine              String?            @db.VarChar(50)
  mobileNo              String             @db.VarChar(50)
  emailAddress          String             @db.VarChar(255)
  homeAddress           String             @db.VarChar(255)
  city                  String             @db.VarChar(100)
  stateProvince         String             @db.VarChar(100)
  postalCode            String             @db.VarChar(20)
  educationalAttainment String             @db.VarChar(255)
  occupation            String             @db.VarChar(100)
  employer              String?            @db.VarChar(255)
  companyAddress        String?            @db.VarChar(255)
  companyCity           String?            @db.VarChar(100)
  businessNo            String?            @db.VarChar(50)
  annualIncome          Decimal?           @db.Decimal(12, 2)
  parentStatus          ParentStatus
  createdBy             Int
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  deletedAt             DateTime?
  studentForm           StudentApplication @relation(fields: [studentFormId], references: [id])
}

model RegistrationCode {
  id               Int                 @id @default(autoincrement())
  registrationCode String              @unique @db.VarChar(20)
  status           CodeStatus          @default(ACTIVE)
  expirationDate   DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  deletedAt        DateTime?
  registrationId   Int?
  applicationId    Int?
  application      StudentApplication? @relation(fields: [applicationId], references: [id])
  registration     Registration?       @relation(fields: [registrationId], references: [id])
}

model GeneralPolicy {
  id        Int           @id @default(autoincrement())
  title     String        @db.VarChar(255)
  content   String
  status    GeneralStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum UserRole {
  STUDENT
  ADMIN
  TEACHER
  PARENT
  STAFF
}

enum GeneralStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  ARCHIVED
}

enum RegistrationType {
  NEW
  OLD
  TRANSFER
  RETURNING
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  EXPIRED
}

enum CodeStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum RequirementStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
  INCOMPLETE
}

enum FeedbackType {
  COMPLAINT
  SUGGESTION
  COMPLIMENT
  BUG_REPORT
  FEATURE_REQUEST
}

enum ApplicationStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  WAITLISTED
}

enum GuardianType {
  FATHER
  MOTHER
  GUARDIAN
  GRANDFATHER
  GRANDMOTHER
  UNCLE
  AUNT
  SIBLING
  OTHER
}

enum ChildStatus {
  LEGITIMATE
  ILLEGITIMATE
  ADOPTED
  STEPCHILD
}

enum ParentStatus {
  MARRIED
  SEPARATED
  DIVORCED
  WIDOWED
  SINGLE
  DECEASED
}
